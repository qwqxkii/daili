## Xboard Docker-Compose 部署迁移教程
本文教你如何在命令行使用docker-compose + MySQL5.7+内置redis来快速部署Xboard  
需要自行处理好Mysql的安装。
源地址：
```
https://github.com/cedar2025/Xboard/blob/dev/docs/docker-compose%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97.md
```
### 部署 (使用docker-compose 2分钟部署)
> 在此提供Xboard安装、快速体验Xboard的步骤。   
使用docker compose + sqlite 快速部署站点（**安装Mysql使用内部redis**）
1. AB安装docker
````
curl -sSL https://get.docker.com | bash
systemctl enable docker
systemctl start docker
````


B机器安装数据库
````
docker pull mysql:5.7
docker volume create mysql
````
将备份包上传到服务器开始执行
将数据倾倒数据库
````
tar xvf qwq_2024-10-28_06.tar.gz -C /var/lib/docker/volumes/mysql/
````
采用容器host模式启动数据库 (下面命令看不明白让AI给你解释)
```
docker run --name mysql --net=host -v mysql:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=这里是密码 -d mysql:5.7 --character-set-server=utf8mb4 --collation-server=utf8mb4_bin
```
或者执行对应脚本
````
cd /var/lib/docker/volumes/mysql/ && cat start.sh
````


#### A机器操作获取Docker compose 文件

请使用自己的备份包，Xboard20240929.tar上传到root下解压

执行info脚本或者手动执行下面命令
````
sudo chown -R 1000:1000 ./.docker/.data/redis
````
修改.env变量，将老的数据库地址修改为新的ip
````
vim ~/Xboard/.env
````

启动Xboard
```
cd /root/Xboard && docker compose up -d
```
> 安装完成之后即可访问你的站点
访问站点 
> 启动之后网站端口默认为7001, 你可以配置nginx反向代理使用80端口  

网站地址:   http://你的IP:7001/   
在此你已经成功部署了, 你可以访问网址体验Xboard的完整功能， 
### 配置端口转发

> （本教程之前已经配置，直接更新域名解析A记录即可）

利用Cloudflare的Origin Rules实现自定域回源指定端口

https://hyrikuma-akari.top/2024/04/07/cf-origin-rules/

### **更新**
1. 修改版本
```
cd Xboard
vi docker-compose.yaml
```
> 修改docker-compose.yaml 当中image后面的版本号为你需要的版本  
> 如果为版本为latest 则可以忽略这一步，直接进行第二步

2. 更新数据库（可以执行多次都是安全的）
```
docker compose pull
docker compose down
docker compose run -it --rm xboard php artisan xboard:update
docker compose up -d
```
> 即可更新成功

### **回滚**
> 此回滚不回滚数据库，是否回滚数据库请查看相关文档
1. 回退版本  
```
vi docker-compose.yaml
```
> 修改docker-compose.yaml 当中image后面的版本号为更新前的版本号
2. 启动
```
docker compose up -d
```

### 注意
启用webman后做的任何代码修改都需要重启生效

## 网站备份
> 日本TeraCLOUD网盘通过WebDAV挂载到服务器，免费20G空间
用来每天保存数据足够了

先注册一个账号
teracloud.jp

并且创建获取APP的账号和随机生成的密码
#### 安装davfs2工具
````
#CentOS
yum install davfs2 -y

#Ubuntu/Debian
apt install davfs2 -y
````
提示非ROOT挂载选择NO
配置地址
````
mkdir /cloud
mount -t davfs https://ogi.teracloud.jp/dav/ /cloud
````
然后输入账号密码即可。没有异常输出就是正常，出现问题让AI帮你排错。

#### 1飞书消息提示
做成脚本保存
````
root@ip-172-31-35-166:/home/shell# cat feishumsg.sh 
curl -X POST -H "Content-Type: application/json" \
    -d "{\"msg_type\":\"text\",\"content\":{\"text\":\"$1\"}}" \
    "https://open.feishu.cn/open-apis/bot/v2/hook/$2"
````

#### 2数据库备份脚本
````
root@ip-172-31-35-166:/home/shell# cat file_backup.sh 
#!/bin/bash

# 检查输入参数
if [ "$#" -ne 4 ]; then
    echo "用法: $0 <备份包前缀> <文件保存路径> <被备份路径> <飞书TOKEN>"
    exit 1
fi

# 获取参数
PREFIX=$1
SAVE_PATH=$2
SOURCE_PATH=$3
FSBOT_TOKEN=$4

# 获得当前时间戳
F_DATE=$(date +%Y-%m-%d_%H)

# 根据时间打包命名&打包存放路径
F_FILE_NAME="$SAVE_PATH/${PREFIX}_${F_DATE}.tar.gz"

# 压缩函数
CompressedFile() {
    # 执行tar命令进行压缩
    echo "开始压缩 $F_FILE_NAME"
    tar -czf "$F_FILE_NAME" -C "$SOURCE_PATH" . 2>/dev/null 

    # 判断文件是否压缩成功
    if [ -f "$F_FILE_NAME" ]; then
        size=$(du -sh "$SOURCE_PATH" | cut -f1)
        echo "$F_FILE_NAME 压缩成功"
        sh /home/shell/feishumsg.sh "压缩成功: $F_FILE_NAME 目录大小： $size" "$FSBOT_TOKEN" 2>/dev/null 
    else
        echo "$F_FILE_NAME 压缩失败"
        sh /home/shell/feishumsg.sh "压缩失败: $F_FILE_NAME" "$FSBOT_TOKEN" 2>/dev/null 
    fi
}

CompressedFile
````
#### 3使用
````
root@ip-172-31-35-166:/home/shell# cat add_task_to_crontab.sh 
#!/bin/bash

# 要添加到 crontab 的任务
#!/bin/bash  # 指定脚本的解释器为 Bash

# 要添加到 crontab 的任务，格式为分钟 小时 日 月 星期 命令
task="0 6 * * * sh /home/shell/file_backup.sh qwq /cloud/sql/qwq /var/lib/docker/volumes/mysql f67a7xxxxxxxxxxxxxxxx84682"

# 检查 cron 是否存在
if command -v crontab >/dev/null 2>&1; then
    echo "cron is installed."
else
    echo "cron is not installed. Proceeding to install."

    # 检测操作系统使用的包管理器并安装 cron
    if command -v apt >/dev/null 2>&1; then
        echo "Using apt to install cron."
        sudo apt update
        sudo apt install -y cron
    elif command -v yum >/dev/null 2>&1; then
        echo "Using yum to install cron."
        sudo yum install -y crontabs
    else
        echo "No suitable package manager found. Please install cron manually."
        exit 1  # 退出脚本，返回错误状态
    fi
fi

# 获取当前用户的 crontab 内容，并将结果暂存
# 通过 2>/dev/null 忽略可能的错误消息
current_crontab=$(crontab -l 2>/dev/null)

# 检查当前 crontab 中是否已经存在该任务
if echo "$current_crontab" | grep -q "$task"; then
    # 如果任务已存在，则输出相应消息
    echo "Task already exists in crontab."
else
    # 如果任务不存在，将当前的 crontab 任务和新任务合并，更新 crontab
    { echo "$current_crontab"; echo "$task"; } | crontab
    # 输出任务添加成功的消息
    echo "Task added to crontab successfully."
fi

# 打印当前的 crontab 任务信息
echo "Current crontab tasks:"
crontab -l

````